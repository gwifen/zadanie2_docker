name: GHAction example  

on:
  workflow_dispatch:
  push:
    tags:
    - 'v*'

jobs:
  ci_step:
    name: Build, tag and push Docker image to DockerHub
    runs-on: self-hosted
      
    steps:
      - 
        name: Check out the source_repo
        uses: actions/checkout@v4
      
      -
        name: Docker metadata definitions
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_USERNAME }}/zadanie2
          flavor: latest=false
          tags: |
            type=sha,priority=100,prefix=sha-,format=short
            type=semver,priority=200,pattern={{version}}   

      - 
        name: QEMU set-up
        uses: docker/setup-qemu-action@v3

      - 
        name: Buildx set-up
        uses: docker/setup-buildx-action@v3

      - 
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - 
        name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: |
            type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/example:cache 
          cache-to: |
            type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/example:cache  
          tags: ${{ steps.meta.outputs.tags }}

      #========================
      - 
        name: Vulnerability Scan with Docker Scout
        id: scan_vulnerabilities
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          sarif-file: sarif.output.json
          summary: true

      - 
        name: Analyze CVE Results
        id: analyze_cves
        run: |
          critical_issues=$(jq '[.runs[].results[] | select(.level == "critical")] | length' sarif.output.json)
          high_issues=$(jq '[.runs[].results[] | select(.level == "high")] | length' sarif.output.json)
          echo "Critical issues: $critical_issues"
          echo "High issues: $high_issues"
          if [ "$critical_issues" -ne 0 ] || [ "$high_issues" -ne 0 ]; then
            echo "Critical or high vulnerabilities detected"
            exit 1
          else
            echo "No critical or high vulnerabilities found"
          fi
      
      - 
        name: GHCR Login
        if: ${{ steps.analyze_cves.outcome == 'success' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }} 
      
      -
        name: Define Metadata for GHCR
        id: meta_ghcr
        if: ${{ steps.analyze_cves.outcome == 'success' }}
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: latest

      -
        name: Build and Push Image to GHCR
        if: ${{ steps.analyze_cves.outcome == 'success' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta_ghcr.outputs.tags }}
